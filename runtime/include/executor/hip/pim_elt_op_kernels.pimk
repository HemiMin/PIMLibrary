/*
 * Copyright (C) 2022 Samsung Electronics Co. LTD
 *
 * This software is a property of Samsung Electronics.
 * No part of this software, either material or conceptual may be copied or distributed, transmitted,
 * transcribed, stored in a retrieval system or translated into any human or computer language in any form by any means,
 * electronic, mechanical, manual or otherwise, or disclosed
 * to third parties without the express written permission of Samsung Electronics.
 * (Use of the Software is restricted to non-commercial, personal or academic, research purpose only)
 */

#ifndef _PIM_ELT_OP_KERNELS_PIMK_
#define _PIM_ELT_OP_KERNELS_PIMK_

#define PREPARE_KERNEL 1
#define PARK_IN 1
#define CHANGE_SB_HAB 1
#define PROGRAM_CRF 1
#define CHANGE_HAB_HABPIM 1
#define COMPUTE_ELT_OP 1
#define CHANGE_HABPIM_HAB 1
#define CHANGE_HAB_SB 1
#define PARK_OUT 1

__global__ void elt_op_pim(volatile uint8_t* __restrict__ operand0, volatile uint8_t* __restrict__ operand1,
                           volatile uint8_t* __restrict__ pim_ctr, volatile uint8_t* __restrict__ output, int num_tile,
#ifdef EMULATOR
                           PimMemTraceData* fmtd16, int* frd_size, int mt_width, PimMemTracer* emulator_trace,
#endif
                           uint8_t* crf_binary, int crf_size)
{
#ifdef EMULATOR
    emulator_trace->g_fba = (uint64_t)pim_ctr;
    emulator_trace->g_fmtd16 = fmtd16;
    emulator_trace->g_ridx[hipBlockIdx_x] = 0;
    emulator_trace->m_width = mt_width;
    __syncthreads();
#endif
    int num_col = 32;
    int num_grf = 8;
    int num_ba = 4; // #bank_group

    int gidx = hipThreadIdx_x / 2; // GRF index(0~7)

    // data index offset
    // even threadIdx accesses data[0:15],
    // odd threadIdx accesses data[16:31],
    uint64_t offset = (hipThreadIdx_x % 2) * 0x10;
    uint64_t addr, addr_even, addr_odd;

/* Radeon7(VEGA20) memory is 16GB but our target is 32GB system */
/* so program_crf and chagne_pim_mode functions can not access to over 8GB in our system */

#if PARK_IN
    park_in(pim_ctr, gidx, num_ba, offset);
#endif

    if (hipThreadIdx_x < 2) {
#if CHANGE_SB_HAB
        change_sb_hab(pim_ctr, offset);
#endif
#if PROGRAM_CRF
        program_crf(pim_ctr, gidx, crf_binary, offset);
#endif
#if CHANGE_HAB_HABPIM
        change_hab_habpim(pim_ctr, offset);
#endif
        B_CMD(1);
    }

    if (hipThreadIdx_x < 16) {
#if COMPUTE_ELT_OP
        for (int tile_idx = 0; tile_idx < num_tile; tile_idx++) {
            unsigned int loc = tile_idx * num_grf + gidx;
            unsigned int row = loc / num_col;
            unsigned int col = loc % num_col;

            addr = addr_gen(hipBlockIdx_x, 0, 0, 0, row, col);
            //printf("tile_idx: %d, ch: %d, row: %d, col: %d, addr:%d\n", tile_idx, hipBlockIdx_x, row, col, addr/32);

            addr_even = addr + offset;
            addr_odd = addr_even + 0x2000;

            R_CMD(&operand0[addr_even]);
            B_CMD(1);

            R_CMD(&operand1[addr_even]);
            B_CMD(1);

            W_CMD(&output[addr_even]);
            W_CMD(&output[addr_even]);
            R_CMD(&output[addr_even]);
            B_CMD(1);

            R_CMD(&operand0[addr_odd]);
            B_CMD(1);

            R_CMD(&operand1[addr_odd]);
            B_CMD(1);

            W_CMD(&output[addr_odd]);
            W_CMD(&output[addr_odd]);
            R_CMD(&output[addr_odd]);
            B_CMD(1);
        }
#endif
    }

    if (hipThreadIdx_x < 4) {
#if CHANGE_HABPIM_HAB
        change_habpim_hab(pim_ctr, offset);
#endif

#if CHANGE_HAB_SB
        change_hab_sb(pim_ctr, gidx, offset);
#endif
    }

#if PARK_OUT
    park_out(pim_ctr, gidx, num_ba, offset);
#endif

#ifdef EMULATOR
    if (hipBlockIdx_x == 0 && hipThreadIdx_x == 0) {
        frd_size[0] = emulator_trace->g_ridx[0];
    }
#endif
}

#endif /* _PIM_ELT_OP_KERNELS_PIMK_ */
