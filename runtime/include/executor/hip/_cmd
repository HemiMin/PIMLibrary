/*
 * Copyright (C) 2022 Samsung Electronics Co. LTD
 *
 * This software is a property of Samsung Electronics.
 * No part of this software, either material or conceptual may be copied or distributed, transmitted,
 * transcribed, stored in a retrieval system or translated into any human or computer language in any form by any means,
 * electronic, mechanical, manual or otherwise, or disclosed
 * to third parties without the express written permission of Samsung Electronics.
 * (Use of the Software is restricted to non-commercial, personal or academic, research purpose only)
 */

#ifndef _PIM_OP_KERNELS_PIMK_
#define _PIM_OP_KERNELS_PIMK_

#include "manager/PimInfo.h"
#include "pim_crf_bins.h"
#include "pim_data_types.h"
#include "utility/pim_util.h"

#ifdef EMULATOR
__device__ void _R_CMD(volatile uint8_t* __restrict__ addr, PimMemTracer* __restrict__ emulator_trace)
{
    int bid = hipBlockIdx_x;
    int tid = hipThreadIdx_x;
    int row = bid * emulator_trace->m_width;
    int ridx = row + atomicAdd(&emulator_trace->g_ridx[bid], 1);

    emulator_trace->g_fmtd16[ridx].block_id = bid;
    emulator_trace->g_fmtd16[ridx].thread_id = tid;
    emulator_trace->g_fmtd16[ridx].addr = (uint64_t)addr - emulator_trace->g_fba;
    emulator_trace->g_fmtd16[ridx].cmd = 'R';
}

__device__ void _W_CMD(volatile uint8_t* __restrict__ addr, PimMemTracer* __restrict__ emulator_trace)
{
    int bid = hipBlockIdx_x;
    int tid = hipThreadIdx_x;
    int row = bid * emulator_trace->m_width;
    int ridx = row + atomicAdd(&emulator_trace->g_ridx[bid], 1);

    emulator_trace->g_fmtd16[ridx].block_id = bid;
    emulator_trace->g_fmtd16[ridx].thread_id = tid;
    emulator_trace->g_fmtd16[ridx].addr = (uint64_t)addr - emulator_trace->g_fba;
    emulator_trace->g_fmtd16[ridx].cmd = 'W';
}

__device__ void _W_CMD_R(volatile uint8_t* __restrict__ addr, volatile uint8_t* __restrict__ src,
                         PimMemTracer* __restrict__ emulator_trace)
{
    int bid = hipBlockIdx_x;
    int tid = hipThreadIdx_x;
    int row = bid * emulator_trace->m_width;
    int ridx = row + atomicAdd(&emulator_trace->g_ridx[bid], 1);

    memcpy(emulator_trace->g_fmtd16[ridx].data, (uint8_t*)src, 16);
    emulator_trace->g_fmtd16[ridx].block_id = bid;
    emulator_trace->g_fmtd16[ridx].thread_id = tid;
    emulator_trace->g_fmtd16[ridx].addr = (uint64_t)addr - emulator_trace->g_fba;
    emulator_trace->g_fmtd16[ridx].cmd = 'W';
}

__device__ void _B_CMD(int type, PimMemTracer* __restrict__ emulator_trace)
{
    int row = hipBlockIdx_x * emulator_trace->m_width;
    int midx = row + atomicAdd(&emulator_trace->g_ridx[hipBlockIdx_x], 1);

    memset(emulator_trace->g_fmtd16[midx].data, 0, 16);
    emulator_trace->g_fmtd16[midx].block_id = hipBlockIdx_x;
    emulator_trace->g_fmtd16[midx].thread_id = hipThreadIdx_x;
    emulator_trace->g_fmtd16[midx].addr = 0;
    emulator_trace->g_fmtd16[midx].cmd = 'B';

    (type == 0) ? __syncthreads() : __threadfence();
}

#else  /* TARGET */

__device__ void _R_CMD(volatile uint8_t* __restrict__ addr)
{
    asm volatile("global_load_dwordx4 v[84:87], %0, off, glc, slc" ::"v"(addr) : "v84", "v85", "v86", "v87");
}

__device__ void _W_CMD(volatile uint8_t* __restrict__ addr)
{
    asm volatile("global_store_dwordx4 %0, v[80:83], off, glc, slc" ::"v"(addr) : "v80", "v81", "v82", "v83");
}

__device__ void _W_CMD_R(volatile uint8_t* __restrict__ addr, volatile uint8_t* __restrict__ src)
{
    ((ulonglong2*)addr)[0] = ((ulonglong2*)src)[0];
}

__device__ void _B_CMD(int type)
{
    switch (type) {
        case 0:
            __syncthreads();
            break;
        case 1:
            asm volatile("s_waitcnt vmcnt(0) lgkmcnt(0)");
            break;
        case 2:
            __threadfence();
            break;
        default:
            break;
    }
}
#endif /* EMULATOR */

#ifdef EMULATOR
#define R_CMD(x) _R_CMD(x, emulator_trace)
#define W_CMD(x) _W_CMD(x, emulator_trace)
#define W_CMD_R(x, y) _W_CMD_R(x, y, emulator_trace)
#define B_CMD(x) _B_CMD(x, emulator_trace)
#else
#define R_CMD(x) _R_CMD(x)
#define W_CMD(x) _W_CMD(x)
#define W_CMD_R(x, y) _W_CMD_R(x, y)
#define B_CMD(x) _B_CMD(x)
#endif

/*
Sugars to represent each common step in executing a particular kernel on PIM.
* park_in
* change sb to hab mode
* program_crf / program srf
* change hab to hab pim mode
* change hab pim to hab mode.
* change hab to sb mode.
* park_out
*/
__device__ void _park_in(volatile uint8_t* __restrict__ pim_ctr, int gidx, int num_ba, uint64_t offset
#ifdef EMULATOR
                         ,
                         PimMemTracer* emulator_trace
#endif
                         )
{
    uint64_t addr;
    addr = addr_gen(hipBlockIdx_x, 0, gidx / num_ba, gidx % num_ba, (1 << 13), 0);
    W_CMD(&pim_ctr[addr + offset]);
    B_CMD(1);
}

__device__ void _change_sb_hab(volatile uint8_t* __restrict__ pim_ctr, uint64_t offset
#ifdef EMULATOR
                               ,
                               PimMemTracer* emulator_trace
#endif
                               )

{
    uint64_t addr;
    addr = addr_gen(hipBlockIdx_x, 0, 2, 0, 0x27ff, 0x1f);
    W_CMD(&pim_ctr[addr + offset]);
    B_CMD(1);
    addr = addr_gen(hipBlockIdx_x, 0, 2, 1, 0x27ff, 0x1f);
    W_CMD(&pim_ctr[addr + offset]);
    B_CMD(1);
    addr = addr_gen(hipBlockIdx_x, 0, 0, 0, 0x27ff, 0x1f);
    W_CMD(&pim_ctr[addr + offset]);
    B_CMD(1);
    addr = addr_gen(hipBlockIdx_x, 0, 0, 1, 0x27ff, 0x1f);
    W_CMD(&pim_ctr[addr + offset]);
    B_CMD(1);
}

__device__ void _program_crf(volatile uint8_t* __restrict__ pim_ctr, int gidx, uint8_t* crf_binary, uint64_t offset
#ifdef EMULATOR
                             ,
                             PimMemTracer* emulator_trace
#endif
                             )
{
    uint64_t addr;
    addr = addr_gen(hipBlockIdx_x, 0, 0, 1, 0x3fff, 0x4 + gidx);
    W_CMD_R(&pim_ctr[addr + offset], crf_binary + offset);
}

// specific to gemv and batch norm,
__device__ void _program_crf_mod(volatile uint8_t* __restrict__ pim_ctr, int gidx, uint8_t* crf_binary, uint64_t offset
#ifdef EMULATOR
                                ,
                                PimMemTracer* emulator_trace
#endif
                                )
{
    uint64_t addr;
    // addr of crf
    // before program crf, mode changed SB to HAB
    // so we dont need to specify bankIdx(threadIdx)
    // only channelIdx(blockIdx)
    addr = addr_gen(hipBlockIdx_x, 0, 0, 1, 0x3fff, 0x4 + gidx);
    W_CMD_R(&pim_ctr[addr + offset], crf_binary + (hipThreadIdx_x << 4));
    R_CMD(&pim_ctr[addr + offset]);
    B_CMD(1);
}

__device__ void _program_srf(volatile uint8_t* __restrict__ pim_ctr, uint8_t* srf_binary, uint64_t offset
#ifdef EMULATOR
                             ,
                             PimMemTracer* emulator_trace
#endif
                             )
{
    uint64_t addr;
    addr = addr_gen(hipBlockIdx_x, 0, 0, 0, 0x3fff, 0x0);
    W_CMD_R(&pim_ctr[addr + 32 + offset], srf_binary + offset);
}

__device__ void _change_hab_habpim(volatile uint8_t* __restrict__ pim_ctr, uint64_t offset
#ifdef EMULATOR
                                   ,
                                   PimMemTracer* emulator_trace
#endif
                                   )
{
    uint64_t addr;
    addr = addr_gen(hipBlockIdx_x, 0, 0, 0, 0x3fff, 0x0);
    W_CMD_R(&pim_ctr[addr + offset], hab_to_hab_pim + offset);
    R_CMD(&pim_ctr[addr + offset]);
}

__device__ void _change_habpim_hab(volatile uint8_t* __restrict__ pim_ctr, uint64_t offset
#ifdef EMULATOR
                                   ,
                                   PimMemTracer* emulator_trace
#endif
                                   )
{
    uint64_t addr;
    addr = addr_gen(hipBlockIdx_x, 0, 0, 0, 0x3fff, 0x0);
    W_CMD_R(&pim_ctr[addr + offset], hab_pim_to_hab + offset);
    R_CMD(&pim_ctr[addr + offset]);
    B_CMD(1);
}

__device__ void _change_hab_sb(volatile uint8_t* __restrict__ pim_ctr, int gidx, uint64_t offset
#ifdef EMULATOR
                               ,
                               PimMemTracer* emulator_trace
#endif
                               )
{
    uint64_t addr;
    addr = addr_gen(hipBlockIdx_x, 0, 0, gidx, 0x2fff, 0x1f);
    W_CMD(&pim_ctr[addr + offset]);
    R_CMD(&pim_ctr[addr + offset]);
    B_CMD(1);
}

__device__ void _park_out(volatile uint8_t* __restrict__ pim_ctr, int gidx, int num_ba, uint64_t offset
#ifdef EMULATOR
                          ,
                          PimMemTracer* emulator_trace
#endif
                          )
{
    uint64_t addr;
    addr = addr_gen(hipBlockIdx_x, 0, gidx / num_ba, gidx % num_ba, (1 << 13), 0);
    W_CMD(&pim_ctr[addr + offset]);
}

#ifdef EMULATOR
#define park_in(a, b, c, d) _park_in(a, b, c, d, emulator_trace)
#define change_sb_hab(a, b) _change_sb_hab(a, b, emulator_trace)
#define program_crf(a, b, c, d) _program_crf(a, b, c, d, emulator_trace)
#define program_crf_mod(a, b, c, d) _program_crf_mod(a, b, c, d, emulator_trace)
#define program_srf(a, b, c) _program_srf(a, b, c, emulator_trace)
#define change_hab_habpim(a, b) _change_hab_habpim(a, b, emulator_trace)
#define change_habpim_hab(a, b) _change_habpim_hab(a, b, emulator_trace)
#define change_hab_sb(a, b, c) _change_hab_sb(a, b, c, emulator_trace)
#define park_out(a, b, c, d) _park_out(a, b, c, d, emulator_trace)

#else
#define park_in(a, b, c, d) _park_in(a, b, c, d)
#define change_sb_hab(a, b) _change_sb_hab(a, b)
#define program_crf(a, b, c, d) _program_crf(a, b, c, d)
#define program_crf_mod(a, b, c, d) _program_crf_mod(a, b, c, d)
#define program_srf(a, b, c) _program_srf(a, b, c)
#define change_hab_habpim(a, b) _change_hab_habpim(a, b)
#define change_habpim_hab(a, b) _change_habpim_hab(a, b)
#define change_hab_sb(a, b, c) _change_hab_sb(a, b, c)
#define park_out(a, b, c, d) _park_out(a, b, c, d)
#endif

#include "pim_bn_kernels.pimk"
#include "pim_copy_kernels.pimk"
#include "pim_elt_op_kernels.pimk"
#include "pim_gemm_kernels.pimk"
#include "pim_gemv_kernels.pimk"
#include "pim_relu_kernels.pimk"

__global__ void dummy_kernel(void) {}
#endif /* _PIM_OP_KERNELS_PIMK_ */
