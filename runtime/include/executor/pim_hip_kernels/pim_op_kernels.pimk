/*
 * Copyright (C) 2021 Samsung Electronics Co. LTD
 *
 * This software is a property of Samsung Electronics.
 * No part of this software, either material or conceptual may be copied or distributed, transmitted,
 * transcribed, stored in a retrieval system or translated into any human or computer language in any form by any means,
 * electronic, mechanical, manual or otherwise, or disclosed
 * to third parties without the express written permission of Samsung Electronics.
 */

#ifndef _PIM_OP_KERNELS_PIMK_
#define _PIM_OP_KERNELS_PIMK_

#include "manager/PimInfo.h"
#include "pim_crf_bins.h"
#include "pim_data_types.h"
#include "utility/pim_util.h"

__host__ __device__ uint32_t mask_by_bit(uint32_t value, uint32_t start, uint32_t end)
{
    int length = start - end + 1;
    value >>= end;
    return value & ((1 << length) - 1);
}

__host__ __device__ uint64_t addr_gen(uint32_t chan, uint32_t rank, uint32_t bankgroup, uint32_t bank, uint32_t row,
                                      uint32_t col)
{
    /* vega20 memory map info */
    int num_row_bit = 14;
    int num_col_high_bit = 3;
    int num_bank_high_bit = 1;
    int num_bankgroup_bit = 2;
    int num_bank_low_bit = 1;
    int num_chan_bit = 6;
    int num_offset_bit = 5;

    uint64_t addr = 0;

    addr = rank;

    addr <<= num_row_bit;
    addr |= row;

    addr <<= num_col_high_bit;
    addr |= mask_by_bit(col, 4, 2);

    addr <<= num_bank_high_bit;
    addr |= mask_by_bit(bank, 1, 1);

    addr <<= num_bankgroup_bit;
    addr |= bankgroup;

    addr <<= num_bank_low_bit;
    addr |= mask_by_bit(bank, 0, 0);

    addr <<= num_chan_bit - 1;
    addr |= mask_by_bit(chan, num_chan_bit - 1, 1);

    addr <<= 1;
    addr |= mask_by_bit(col, 1, 1);

    addr <<= 1;
    addr |= mask_by_bit(chan, 0, 0);

    addr <<= 1;
    addr |= mask_by_bit(col, 0, 0);

    addr <<= num_offset_bit;

#if TARGET && RADEON7
    /* we assume pim kernel run on vega20(32GB) system */
    /* but SAIT server is vega20(16GB) system */
    /* so upper 2bit should be set as 0 for normal work */
    uint64_t mask = 0x1FFFFFFFF;
    addr &= mask;
#endif

    return addr;
}

__host__ __device__ uint64_t addr_gen_safe(uint32_t chan, uint32_t rank, uint32_t bg, uint32_t bank, uint32_t& row,
                                           uint32_t& col)
{
    PimBlockInfo* fbi = &vega20_fbi;

    while (col >= fbi->num_col / fbi->bl) {
        row++;
        col -= (fbi->num_col / fbi->bl);
    }

    if (row >= fbi->num_row) {
    }

    return addr_gen(chan, rank, bg, bank, row, col);
}

#ifdef EMULATOR
__device__ void _R_CMD(volatile uint8_t* __restrict__ addr, PimMemTracer* __restrict__ emulator_trace)
{
    int bid = hipBlockIdx_x;
    int tid = hipThreadIdx_x;
    int row = bid * emulator_trace->m_width;
    int ridx = row + atomicAdd(&emulator_trace->g_ridx[bid], 1);

    emulator_trace->g_fmtd16[ridx].block_id = bid;
    emulator_trace->g_fmtd16[ridx].thread_id = tid;
    emulator_trace->g_fmtd16[ridx].addr = (uint64_t)addr - emulator_trace->g_fba;
    emulator_trace->g_fmtd16[ridx].cmd = 'R';
}

__device__ void _W_CMD(volatile uint8_t* __restrict__ addr, PimMemTracer* __restrict__ emulator_trace)
{
    int bid = hipBlockIdx_x;
    int tid = hipThreadIdx_x;
    int row = bid * emulator_trace->m_width;
    int ridx = row + atomicAdd(&emulator_trace->g_ridx[bid], 1);

    emulator_trace->g_fmtd16[ridx].block_id = bid;
    emulator_trace->g_fmtd16[ridx].thread_id = tid;
    emulator_trace->g_fmtd16[ridx].addr = (uint64_t)addr - emulator_trace->g_fba;
    emulator_trace->g_fmtd16[ridx].cmd = 'W';
}

__device__ void _W_CMD_R(volatile uint8_t* __restrict__ addr, volatile uint8_t* __restrict__ src,
                         PimMemTracer* __restrict__ emulator_trace)
{
    int bid = hipBlockIdx_x;
    int tid = hipThreadIdx_x;
    int row = bid * emulator_trace->m_width;
    int ridx = row + atomicAdd(&emulator_trace->g_ridx[bid], 1);

    memcpy(emulator_trace->g_fmtd16[ridx].data, (uint8_t*)src, 16);
    emulator_trace->g_fmtd16[ridx].block_id = bid;
    emulator_trace->g_fmtd16[ridx].thread_id = tid;
    emulator_trace->g_fmtd16[ridx].addr = (uint64_t)addr - emulator_trace->g_fba;
    emulator_trace->g_fmtd16[ridx].cmd = 'W';
}

__device__ void _B_CMD(int type, PimMemTracer* __restrict__ emulator_trace)
{
    int row = hipBlockIdx_x * emulator_trace->m_width;
    int midx = row + atomicAdd(&emulator_trace->g_ridx[hipBlockIdx_x], 1);

    memset(emulator_trace->g_fmtd16[midx].data, 0, 16);
    emulator_trace->g_fmtd16[midx].block_id = hipBlockIdx_x;
    emulator_trace->g_fmtd16[midx].thread_id = hipThreadIdx_x;
    emulator_trace->g_fmtd16[midx].addr = 0;
    emulator_trace->g_fmtd16[midx].cmd = 'B';

    (type == 0) ? __syncthreads() : __threadfence();
}

#else  /* TARGET */

__device__ void _R_CMD(volatile uint8_t* __restrict__ addr)
{
    asm volatile("global_load_dwordx4 v[84:87], %0, off, glc, slc" ::"v"(addr) : "v84", "v85", "v86", "v87");
}

__device__ void _W_CMD(volatile uint8_t* __restrict__ addr)
{
    asm volatile("global_store_dwordx4 %0, v[80:83], off, glc, slc" ::"v"(addr) : "v80", "v81", "v82", "v83");
}

__device__ void _W_CMD_R(volatile uint8_t* __restrict__ addr, volatile uint8_t* __restrict__ src)
{
    ((ulonglong2*)addr)[0] = ((ulonglong2*)src)[0];
}

__device__ void _B_CMD(int type)
{
    switch (type) {
        case 0:
            __syncthreads();
            break;
        case 1:
            asm volatile("s_waitcnt vmcnt(0) lgkmcnt(0)");
            break;
        case 2:
            __threadfence();
            break;
        default:
            break;
    }
}
#endif /* EMULATOR */

#ifdef EMULATOR
#define R_CMD(x) _R_CMD(x, emulator_trace)
#define W_CMD(x) _W_CMD(x, emulator_trace)
#define W_CMD_R(x, y) _W_CMD_R(x, y, emulator_trace)
#define B_CMD(x) _B_CMD(x, emulator_trace)
#else
#define R_CMD(x) _R_CMD(x)
#define W_CMD(x) _W_CMD(x)
#define W_CMD_R(x, y) _W_CMD_R(x, y)
#define B_CMD(x) _B_CMD(x)
#endif

#include "pim_bn_kernels.pimk"
#include "pim_elt_op_kernels.pimk"
#include "pim_gemv_kernels.pimk"
#include "pim_relu_kernels.pimk"
#include "pim_copy_kernels.pimk"

__global__ void dummy_kernel(void) {}

#endif /* _PIM_OP_KERNELS_PIMK_ */
