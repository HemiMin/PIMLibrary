#ifndef _FIM_GEMV_KERNELS_FIMK_
#define _FIM_GEMV_KERNELS_FIMK_

__global__ void gemv_fim_1cu_2th_fp16(volatile uint8_t* __restrict__ fim_ctr, volatile uint8_t* __restrict__ fim_weight,
                                      volatile uint8_t* __restrict__ fim_gemv_tmp_buffer,
                                      volatile uint8_t* __restrict__ fim_input, volatile uint8_t* __restrict__ output,
                                      int input_dim, int output_dim, FimMemTraceData* fmtd16, int* frd_size,
                                      uint8_t* crf_binary, int crf_size)
{
#ifdef EMULATOR
    g_fba = (uint64_t)fim_ctr;
    g_fmtd16 = fmtd16;
    g_ridx = 0;
    uint64_t offset = (hipThreadIdx_x % 2) * 0x10;
    __syncthreads();
#endif
    FimBlockInfo* fbi = &vega20_fbi;
    input_dim = input_dim * sizeof(half) / fbi->trans_size;
    int num_parallelism = fbi->num_fim_blocks * fbi->num_fim_chan * fbi->num_fim_rank;
    int num_output_bst = output_dim;
    int num_out_tile = ceilf((float)num_output_bst / (float)num_parallelism) / fbi->num_grf_B;
    int num_in_tile = ceilf((float)input_dim / (float)fbi->num_grf_A);
    int num_jump_of_even_bank = fbi->num_grf_B * ceilf((float)num_in_tile / 2) - 1;
    int num_jump_of_odd_bank = fbi->num_grf_B * floorf((float)num_in_tile / 2) - 1;
    int end_col = gemv_get_result_col(input_dim / fbi->trans_size, num_output_bst, num_in_tile, num_out_tile);
    int compute_col = 0;

    /* Radeon7(VEGA20) memory is 16GB but our target is 32GB system */
    /* so program_crf and chagne_fim_mode functions can not access to over 8GB in our system */
    park_in_1cu_2th(fim_ctr, offset);
    change_fim_mode_1cu_2th(fim_ctr, SB_MODE, HAB_MODE, null_bst, offset);
    program_crf_1cu_2th(fim_ctr, crf_binary, crf_size, offset);
    for (int j = 0; j < num_out_tile; j++) {
        change_fim_mode_1cu_2th(fim_ctr, HAB_MODE, HAB_FIM_MODE, gemv_hab_to_hab_fim, offset);
        for (int i = 0; i < num_in_tile; i += 2) {
            compute_gemv_2bank_1cu_2th(fim_ctr, fim_weight, fim_input, num_in_tile / 2, num_out_tile, i, j, EVEN_BANK,
                                       offset);
        }
        for (int i = 1; i < num_in_tile; i += 2) {
            compute_gemv_2bank_1cu_2th(fim_ctr, fim_weight, fim_input, num_in_tile / 2, num_out_tile, i, j, ODD_BANK,
                                       offset);
        }
        compute_col = num_out_tile * num_in_tile / 2 * fbi->num_grf_A * fbi->num_grf_B + j * fbi->num_grf_B;
        add_transaction_all_1cu_2th(fim_ctr, true, 0, 1, 0, compute_col, null_bst, offset, fbi->num_grf);
        change_fim_mode_1cu_2th(fim_ctr, HAB_FIM_MODE, HAB_MODE, gemv_hab_fim_to_hab, offset);
    }
    change_fim_mode_1cu_2th(fim_ctr, HAB_MODE, SB_MODE, null_bst, offset);
    park_out_1cu_2th(fim_ctr, offset);
    read_result_1cu_2th(fim_gemv_tmp_buffer, fim_weight, ODD_BANK, num_output_bst, 0, end_col, offset);
#ifdef EMULATOR
    __syncthreads();
    frd_size[0] = g_ridx;
#endif

#if 0 /* TODO: verify reduce sum in Target Mode */
    if (hipThreadIdx_x == 0) {
        reduce_sum_for_gemv((void*)output, (void*)fim_gemv_tmp_buffer, output_dim * fbi->num_out_per_grf * 2, fbi->num_out_per_grf);
    }
#endif
}

#endif /* _FIM_GEMV_KERNELS_FIMK_ */
